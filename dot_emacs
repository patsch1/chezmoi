;; Init Melpa

(require 'package)
(require 'package)
(setq package-archive-priorities '(("gnu" . 5)
				   ("melpa" . 10))
      package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))

;; One package dir per emacs version
(let ((path (format "~/.emacs.d/elpa-%s" emacs-major-version)))
  (if (file-accessible-directory-p path)
      (setq package-user-dir path)))

(package-initialize)

;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Automatically install packages
;; Not nessesary from emacs 29
(require 'use-package)
(setq use-package-always-ensure t)

; To add
; Config to put backup files into central directory
; rainbow-delimiter
; company + company-box
; perspective
; disable backup files (setq make-backup-files nil)



;;;;; End init packages

(prefer-coding-system 'utf-8)

(setq inhibit-startup-message t)
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
(if (fboundp 'set-fringe-mode) (tooltip-mode 10))

;; Look 'n feel
;;

;; Font
;; Manually install Nerd-Fonts (e.g. Sauce Code Pro) https://www.nerdfonts.com/
(set-frame-font "SauceCodePro NF 12" nil t)

;; Relative line-numbers
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

;; Ivy
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
;(use-package ivy-posframe
;  :config
;  (ivy-posframe-mode 1))
;(setq ivy-display-function #'ivy-posframe-display-at-frame-center)
;(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))

(use-package swiper)
(use-package counsel)

;; Install Nerd-Icons
;; Manually install Nerd-Fonts (e.g. Sauce Code Pro) https://www.nerdfonts.com/
;; After installing nerd-icons and using Sauce Code Pro in Terminal run
;; M-x nerd-icons-install-fonts
;(setq nerd-icons-scale-factor 0.8)
(use-package nerd-icons)
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
(use-package nerd-icons-ivy-rich
  :init
  (nerd-icons-ivy-rich-mode 1)
  (ivy-rich-mode 1))
(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
(use-package nerd-icons-completion
  :config
  (nerd-icons-completion-mode))

;; Doom themes -> Zenburn
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-zenburn t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;(setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
  ;(doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package treemacs-nerd-icons
  :config
  (treemacs-load-theme "nerd-icons"))

;; Doom modline
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
(setq find-file-visit-truename t)
;; Show column numbers
(column-number-mode 1)

;; Show possible key combinations
(use-package which-key
  :config
  (which-key-mode))
(prefer-coding-system 'utf-8)

;; End look 'n feel
;;

(use-package neotree)
(setq neo-theme 'nerd)

;; Hightlight matching parens
(show-paren-mode 1)
(use-package smartparens
  :defer)

;; Add to PATH
(add-to-list 'exec-path' "/usr/local/bin/")

;Multi-Term
(use-package multi-term)
(setq multi-term-program "/bin/zsh")

(use-package ws-butler
  :hook (prog-mode . ws-butler-mode))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(kubedoc nerd-icons-completion doom-modeline counsel ivy-posframe doom-themes nerd-icons-ibuffer nerd-icons-ivy-rich zenburn-theme yasnippet yaml-mode ws-butler which-key swiper smartparens racer pkg-info nim-mode multi-term markdown-preview-eww magit lsp-ui lsp-treemacs lsp-ivy linum-relative helm-lsp google-c-style go-autocomplete faff-theme elixir-ts-mode elixir-mode dockerfile-mode company-prescient company-go chatgpt cargo apropospriate-theme anaconda-mode add-hooks)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
